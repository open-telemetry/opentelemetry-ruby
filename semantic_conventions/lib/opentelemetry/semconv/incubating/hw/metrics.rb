# frozen_string_literal: true

# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#
# This file was autogenerated. Do not edit it by hand.

module OpenTelemetry
  module SemConv
    module Incubating
      module HW
        # @!group Metrics Names
      
        # Remaining fraction of battery charge.
        #
        # @note Stability Level: development
        HW_BATTERY_CHARGE = 'hw.battery.charge'
    
        # Lower limit of battery charge fraction to ensure proper operation.
        #
        # @note Stability Level: development
        HW_BATTERY_CHARGE_LIMIT = 'hw.battery.charge.limit'
    
        # Time left before battery is completely charged or discharged.
        #
        # @note Stability Level: development
        HW_BATTERY_TIME_LEFT = 'hw.battery.time_left'
    
        # CPU current frequency.
        #
        # @note Stability Level: development
        HW_CPU_SPEED = 'hw.cpu.speed'
    
        # CPU maximum frequency.
        #
        # @note Stability Level: development
        HW_CPU_SPEED_LIMIT = 'hw.cpu.speed.limit'
    
        # Energy consumed by the component.
        #
        # @note Stability Level: development
        HW_ENERGY = 'hw.energy'
    
        # Number of errors encountered by the component.
        #
        # @note Stability Level: development
        HW_ERRORS = 'hw.errors'
    
        # Fan speed in revolutions per minute.
        #
        # @note Stability Level: development
        HW_FAN_SPEED = 'hw.fan.speed'
    
        # Speed limit in rpm.
        #
        # @note Stability Level: development
        HW_FAN_SPEED_LIMIT = 'hw.fan.speed.limit'
    
        # Fan speed expressed as a fraction of its maximum speed.
        #
        # @note Stability Level: development
        HW_FAN_SPEED_RATIO = 'hw.fan.speed_ratio'
    
        # Received and transmitted bytes by the GPU.
        #
        # @note Stability Level: development
        HW_GPU_IO = 'hw.gpu.io'
    
        # Size of the GPU memory.
        #
        # @note Stability Level: development
        HW_GPU_MEMORY_LIMIT = 'hw.gpu.memory.limit'
    
        # GPU memory used.
        #
        # @note Stability Level: development
        HW_GPU_MEMORY_USAGE = 'hw.gpu.memory.usage'
    
        # Fraction of GPU memory used.
        #
        # @note Stability Level: development
        HW_GPU_MEMORY_UTILIZATION = 'hw.gpu.memory.utilization'
    
        # Fraction of time spent in a specific task.
        #
        # @note Stability Level: development
        HW_GPU_UTILIZATION = 'hw.gpu.utilization'
    
        # Ambient (external) temperature of the physical host.
        #
        # @note Stability Level: development
        HW_HOST_AMBIENT_TEMPERATURE = 'hw.host.ambient_temperature'
    
        # Total energy consumed by the entire physical host, in joules.
        #
        # The overall energy usage of a host MUST be reported using the specific `hw.host.energy` and `hw.host.power` metrics **only**, instead of the generic `hw.energy` and `hw.power` described in the previous section, to prevent summing up overlapping values.
        #
        # @note Stability Level: development
        HW_HOST_ENERGY = 'hw.host.energy'
    
        # By how many degrees Celsius the temperature of the physical host can be increased, before reaching a warning threshold on one of the internal sensors.
        #
        # @note Stability Level: development
        HW_HOST_HEATING_MARGIN = 'hw.host.heating_margin'
    
        # Instantaneous power consumed by the entire physical host in Watts (`hw.host.energy` is preferred).
        #
        # The overall energy usage of a host MUST be reported using the specific `hw.host.energy` and `hw.host.power` metrics **only**, instead of the generic `hw.energy` and `hw.power` described in the previous section, to prevent summing up overlapping values.
        #
        # @note Stability Level: development
        HW_HOST_POWER = 'hw.host.power'
    
        # Size of the logical disk.
        #
        # @note Stability Level: development
        HW_LOGICAL_DISK_LIMIT = 'hw.logical_disk.limit'
    
        # Logical disk space usage.
        #
        # @note Stability Level: development
        HW_LOGICAL_DISK_USAGE = 'hw.logical_disk.usage'
    
        # Logical disk space utilization as a fraction.
        #
        # @note Stability Level: development
        HW_LOGICAL_DISK_UTILIZATION = 'hw.logical_disk.utilization'
    
        # Size of the memory module.
        #
        # @note Stability Level: development
        HW_MEMORY_SIZE = 'hw.memory.size'
    
        # Link speed.
        #
        # @note Stability Level: development
        HW_NETWORK_BANDWIDTH_LIMIT = 'hw.network.bandwidth.limit'
    
        # Utilization of the network bandwidth as a fraction.
        #
        # @note Stability Level: development
        HW_NETWORK_BANDWIDTH_UTILIZATION = 'hw.network.bandwidth.utilization'
    
        # Received and transmitted network traffic in bytes.
        #
        # @note Stability Level: development
        HW_NETWORK_IO = 'hw.network.io'
    
        # Received and transmitted network traffic in packets (or frames).
        #
        # @note Stability Level: development
        HW_NETWORK_PACKETS = 'hw.network.packets'
    
        # Link status: `1` (up) or `0` (down).
        #
        # @note Stability Level: development
        HW_NETWORK_UP = 'hw.network.up'
    
        # Endurance remaining for this SSD disk.
        #
        # @note Stability Level: development
        HW_PHYSICAL_DISK_ENDURANCE_UTILIZATION = 'hw.physical_disk.endurance_utilization'
    
        # Size of the disk.
        #
        # @note Stability Level: development
        HW_PHYSICAL_DISK_SIZE = 'hw.physical_disk.size'
    
        # Value of the corresponding [S.M.A.R.T.](https://wikipedia.org/wiki/S.M.A.R.T.) (Self-Monitoring, Analysis, and Reporting Technology) attribute.
        #
        # @note Stability Level: development
        HW_PHYSICAL_DISK_SMART = 'hw.physical_disk.smart'
    
        # Instantaneous power consumed by the component.
        #
        # It is recommended to report `hw.energy` instead of `hw.power` when possible.
        #
        # @note Stability Level: development
        HW_POWER = 'hw.power'
    
        # Maximum power output of the power supply.
        #
        # @note Stability Level: development
        HW_POWER_SUPPLY_LIMIT = 'hw.power_supply.limit'
    
        # Current power output of the power supply.
        #
        # @note Stability Level: development
        HW_POWER_SUPPLY_USAGE = 'hw.power_supply.usage'
    
        # Utilization of the power supply as a fraction of its maximum output.
        #
        # @note Stability Level: development
        HW_POWER_SUPPLY_UTILIZATION = 'hw.power_supply.utilization'
    
        # Operational status: `1` (true) or `0` (false) for each of the possible states.
        #
        # `hw.status` is currently specified as an *UpDownCounter* but would ideally be represented using a [*StateSet* as defined in OpenMetrics](https://github.com/prometheus/OpenMetrics/blob/v1.0.0/specification/OpenMetrics.md#stateset). This semantic convention will be updated once *StateSet* is specified in OpenTelemetry. This planned change is not expected to have any consequence on the way users query their timeseries backend to retrieve the values of `hw.status` over time.
        #
        # @note Stability Level: development
        HW_STATUS = 'hw.status'
    
        # Operations performed by the tape drive.
        #
        # @note Stability Level: development
        HW_TAPE_DRIVE_OPERATIONS = 'hw.tape_drive.operations'
    
        # Temperature in degrees Celsius.
        #
        # @note Stability Level: development
        HW_TEMPERATURE = 'hw.temperature'
    
        # Temperature limit in degrees Celsius.
        #
        # @note Stability Level: development
        HW_TEMPERATURE_LIMIT = 'hw.temperature.limit'
    
        # Voltage measured by the sensor.
        #
        # @note Stability Level: development
        HW_VOLTAGE = 'hw.voltage'
    
        # Voltage limit in Volts.
        #
        # @note Stability Level: development
        HW_VOLTAGE_LIMIT = 'hw.voltage.limit'
    
        # Nominal (expected) voltage.
        #
        # @note Stability Level: development
        HW_VOLTAGE_NOMINAL = 'hw.voltage.nominal'
    
        # @!endgroup
      end
    end
  end
end