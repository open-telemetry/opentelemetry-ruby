# frozen_string_literal: true

# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#
# This file was autogenerated. Do not edit it by hand.

module OpenTelemetry
  module SemConv
  module Incubating
    module DB
      # @!group Attribute Names
    
      # The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html)
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level'
  
      # The data center of the coordinating node for a query
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc'
  
      # The ID of the coordinating node for a query
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id'
  
      # Whether or not the query is idempotent
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence'
  
      # The fetch size used for paging, i.e. how many rows will be returned at once
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size'
  
      # The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count'
  
      # The name of the primary Cassandra table that the operation is acting upon, including the keyspace name (if applicable)
      #
      # This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_TABLE = 'db.cassandra.table'
  
      # Deprecated, use `server.address`, `server.port` attributes instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated "Replaced by `server.address` and `server.port`."
      DB_CONNECTION_STRING = 'db.connection_string'
  
      # Unique Cosmos client instance id
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_CLIENT_ID = 'db.cosmosdb.client_id'
  
      # Cosmos client connection mode
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_CONNECTION_MODE = 'db.cosmosdb.connection_mode'
  
      # Cosmos DB container name
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_CONTAINER = 'db.cosmosdb.container'
  
      # CosmosDB Operation Type
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_OPERATION_TYPE = 'db.cosmosdb.operation_type'
  
      # RU consumed for that operation
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_REQUEST_CHARGE = 'db.cosmosdb.request_charge'
  
      # Request payload size in bytes
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_REQUEST_CONTENT_LENGTH = 'db.cosmosdb.request_content_length'
  
      # Cosmos DB status code
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_STATUS_CODE = 'db.cosmosdb.status_code'
  
      # Cosmos DB sub status code
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_SUB_STATUS_CODE = 'db.cosmosdb.sub_status_code'
  
      # Represents the identifier of an Elasticsearch cluster
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_ELASTICSEARCH_CLUSTER_NAME = 'db.elasticsearch.cluster.name'
  
      # Deprecated, use `db.instance.id` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.instance.id`
      DB_ELASTICSEARCH_NODE_NAME = 'db.elasticsearch.node.name'
  
      # A dynamic value in the url path
      #
      # Many Elasticsearch url paths allow dynamic values. These SHOULD be recorded in span attributes in the format `db.elasticsearch.path_parts.<key>`, where `<key>` is the url path part name. The implementation SHOULD reference the [elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json) in order to map the path part values to their names
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_ELASTICSEARCH_PATH_PARTS_LAMBDA = -> (key) { "db.elasticsearch.path_parts.#{key}" }
  
      # An identifier (address, unique name, or any other identifier) of the database instance that is executing queries or mutations on the current connection. This is useful in cases where the database is running in a clustered environment and the instrumentation is able to record the node executing the query. The client may obtain this value in databases like MySQL using queries like `select @@hostname`
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_INSTANCE_ID = 'db.instance.id'
  
      # Removed, no replacement at this time
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Removed as not used
      DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname'
  
      # The MongoDB collection being accessed within the database stated in `db.name`
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_MONGODB_COLLECTION = 'db.mongodb.collection'
  
      # The Microsoft SQL Server [instance name](https://docs.microsoft.com/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance
      #
      # If setting a `db.mssql.instance_name`, `server.port` is no longer required (but still recommended if non-standard)
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name'
  
      # This attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails)
      #
      # In some SQL databases, the database name to be used is called "schema name". In case there are multiple layers that could be considered for database name (e.g. Oracle instance name and schema name), the database name to be used is the more specific layer (e.g. Oracle schema name)
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_NAME = 'db.name'
  
      # The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword
      #
      # When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_OPERATION = 'db.operation'
  
      # The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_REDIS_DATABASE_INDEX = 'db.redis.database_index'
  
      # The name of the primary table that the operation is acting upon, including the database name (if applicable)
      #
      # It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_SQL_TABLE = 'db.sql.table'
  
      # The database statement being executed
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_STATEMENT = 'db.statement'
  
      # An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_SYSTEM = 'db.system'
  
      # Username for accessing the database
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_USER = 'db.user'
  
      # @!endgroup

      # @!group Metric Names
      # @!endgroup
    end
  end # module Incubating
  end
end