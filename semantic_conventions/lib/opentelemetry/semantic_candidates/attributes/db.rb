# frozen_string_literal: true

# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#
# This file was autogenerated. Do not edit it by hand.

module OpenTelemetry
  module SemanticCandidates
    module DB 
      # @!group Attribute Names
    
      # The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html)
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level'
    
      # The data center of the coordinating node for a query
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc'
    
      # The ID of the coordinating node for a query
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id'
    
      # Whether or not the query is idempotent
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence'
    
      # The fetch size used for paging, i.e. how many rows will be returned at once
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size'
    
      # The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count'
    
      # Deprecated, use `db.collection.name` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.collection.name`
      DB_CASSANDRA_TABLE = 'db.cassandra.table'
    
      # The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CLIENT_CONNECTIONS_POOL_NAME = 'db.client.connections.pool.name'
    
      # The state of a connection in the pool
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_CLIENT_CONNECTIONS_STATE = 'db.client.connections.state'
    
      # The name of a collection (table, container) within the database
      #
      # If the collection name is parsed from the query, it SHOULD match the value provided in the query and may be qualified with the schema and database name.
      #   It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COLLECTION_NAME = 'db.collection.name'
    
      # Deprecated, use `server.address`, `server.port` attributes instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated "Replaced by `server.address` and `server.port`."
      DB_CONNECTION_STRING = 'db.connection_string'
    
      # Unique Cosmos client instance id
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_CLIENT_ID = 'db.cosmosdb.client_id'
    
      # Cosmos client connection mode
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_CONNECTION_MODE = 'db.cosmosdb.connection_mode'
    
      # Deprecated, use `db.collection.name` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.collection.name`
      DB_COSMOSDB_CONTAINER = 'db.cosmosdb.container'
    
      # CosmosDB Operation Type
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_OPERATION_TYPE = 'db.cosmosdb.operation_type'
    
      # RU consumed for that operation
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_REQUEST_CHARGE = 'db.cosmosdb.request_charge'
    
      # Request payload size in bytes
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_REQUEST_CONTENT_LENGTH = 'db.cosmosdb.request_content_length'
    
      # Cosmos DB status code
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_STATUS_CODE = 'db.cosmosdb.status_code'
    
      # Cosmos DB sub status code
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_COSMOSDB_SUB_STATUS_CODE = 'db.cosmosdb.sub_status_code'
    
      # Represents the identifier of an Elasticsearch cluster
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_ELASTICSEARCH_CLUSTER_NAME = 'db.elasticsearch.cluster.name'
    
      # Represents the human-readable identifier of the node/instance to which a request was routed
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_ELASTICSEARCH_NODE_NAME = 'db.elasticsearch.node.name'
    
      # A dynamic value in the url path
      #
      # Many Elasticsearch url paths allow dynamic values. These SHOULD be recorded in span attributes in the format `db.elasticsearch.path_parts.<key>`, where `<key>` is the url path part name. The implementation SHOULD reference the [elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json) in order to map the path part values to their names
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_ELASTICSEARCH_PATH_PARTS = 'db.elasticsearch.path_parts'
    
      # Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead
      DB_INSTANCE_ID = 'db.instance.id'
    
      # Removed, no replacement at this time
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Removed as not used
      DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname'
    
      # Deprecated, use `db.collection.name` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.collection.name`
      DB_MONGODB_COLLECTION = 'db.mongodb.collection'
    
      # Deprecated, SQL Server instance is now populated as a part of `db.namespace` attribute
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Deprecated, no replacement at this time
      DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name'
    
      # Deprecated, use `db.namespace` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.namespace`
      DB_NAME = 'db.name'
    
      # The name of the database, fully qualified within the server address and port
      #
      # If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that "startswith" queries for the more general namespaces will be valid.
      #   Semantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.
      #   It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_NAMESPACE = 'db.namespace'
    
      # Deprecated, use `db.operation.name` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.operation.name`
      DB_OPERATION = 'db.operation'
    
      # The name of the operation or command being executed
      #
      # It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_OPERATION_NAME = 'db.operation.name'
    
      # The query parameters used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being the parameter value
      #
      # Query parameters should only be captured when `db.query.text` is parameterized with placeholders.
      #   If a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_QUERY_PARAMETER = 'db.query.parameter'
    
      # The database query being executed
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_QUERY_TEXT = 'db.query.text'
    
      # Deprecated, use `db.namespace` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.namespace`
      DB_REDIS_DATABASE_INDEX = 'db.redis.database_index'
    
      # Deprecated, use `db.collection.name` instead
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.collection.name`
      DB_SQL_TABLE = 'db.sql.table'
    
      # The database statement being executed
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated Replaced by `db.query.text`
      DB_STATEMENT = 'db.statement'
    
      # The database management system (DBMS) product as identified by the client instrumentation
      #
      # The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system` is set to `postgresql` based on the instrumentation's best knowledge
      #
      # @note StabilityLevel.EXPERIMENTAL
      DB_SYSTEM = 'db.system'
    
      # Deprecated, no replacement at this time
      #
      # @note StabilityLevel.EXPERIMENTAL
      #
      # @deprecated No replacement at this time
      DB_USER = 'db.user'
    
      # @!endgroup
    end
  end
end